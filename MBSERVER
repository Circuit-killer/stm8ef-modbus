\ A simple STM8 eForth MODBUS Server based on MBPROTO

\ Check if the MODBUS protocol core is already present
#require MBPROTO

\ Resetting the FC handler table can be helpful for development
#require WIPE
#require MBRESET
MBRESET   \ Reset the MODBUS Function Code table
WIPE

\ Compile time requirements
#require ALIAS
#require 'IDLE
#require :NVM
#require WIPE
#require LOCK
#require ULOCK

\ Compile time symbols
4 CONSTANT COILCELLS
4 CONSTANT INPUTCELLS
2 CONSTANT HOLDINGCELLS

1024  CONSTANT EECELLS   \ this is the maximum for any STM8 device
$4000 CONSTANT EESTART

NVM  \ compile to Flash memory from here on
#require BF!
#require BF@


  \ --- FC01 "Read Coils"

  VARIABLE coils COILCELLS 1- 2* ALLOT

  \ FC01 Read Coils transfer
  :NVM  ( i -- )
    ( i ) coils OVER ( i a i ) BF@
    ( i b ) SWAP mbp1 - ( b i0 )
    txbuf 3 + SWAP ( b a i0 ) LEBF!
  ;RAM ALIAS FC01ACT NVM

  \ FC01 handler
  :NVM  ( -- )
    [ COILCELLS 16 * ] LITERAL mbrange? IF
      [ ' FC01ACT ] LITERAL ( xt ) mbrbits
    THEN
  ;NVM ( xt ) 1 FC>XT !

  \ --- FC02 "Read Discrete Inputs"

  VARIABLE inputs INPUTCELLS 1- 2* ALLOT

  \ FC02 input register transfer
  :NVM  ( i -- )
    ( i ) inputs OVER ( i a i ) BF@
    ( i b ) SWAP mbp1 - ( b i0 )
    txbuf 3 + SWAP ( b a i0 ) LEBF!
  ;RAM ALIAS FC02ACT NVM

  \ FC02 handler
  :NVM  ( -- )
    [ INPUTCELLS 16 * ] LITERAL mbrange? IF
      [ ' FC02ACT ] LITERAL ( xt ) mbrbits
    THEN
  ;NVM ( xt ) 2 FC>XT !

  \ --- FC03 "Read Holding Registers"

  VARIABLE holding HOLDINGCELLS 1- 2* ALLOT

  \ dummy
  : mbread ;

  \ FC03 holding register iterated transfer
  :NVM  ( i -- 1 )
    ( i ) DUP 0 EECELLS WITHIN IF
      2* EESTART + @
    ELSE
      ( i ) EECELLS - DUP 0 HOLDINGCELLS WITHIN IF
        2* holding + @
      ELSE
        ( i ) DROP 0
      THEN
    THEN
    tx+   1 ( inc )
  ;NVM ( xt )

  \ FC03 handler
  :NVM  ( -- )
     [ ( xt xth ) SWAP ] LITERAL 16 ( xt bpu ) mbread
  ;NVM ( xth ) 3 FC>XT !


  \ --- FC04 "Read Input Registers"

  \ FC04 input register iterated transfer
  :NVM  ( i -- 1 )
    2* inputs + @ tx+   1 ( inc )
  ;NVM ( xt )

  \ FC04 handler
  :NVM  ( -- )
     [ ( xt xth ) SWAP ] LITERAL 16 ( xt bpu ) mbread
  ;NVM ( xth ) 4 FC>XT !


  \ --- FC05 handler "Write Single Coil"
  :NVM   ( -- )
    mbp1 1- ( #b ) DUP 0 [ COILCELLS 16 * ] LITERAL WITHIN IF
      mbp2 $FF00 =
      ( #b f ) coils B>L
      ( #b f a ) ROT ( f a #b ) B!
      MBWR   \ MODBUS write response
    ELSE
      DROP   2 MBEC
    THEN
  ;NVM ( xth ) 5 FC>XT !


  \ --- FC06 handler "Write Single Register"
  :NVM   ( -- )
    mbp1 ( #r ) DUP 0 EECELLS WITHIN IF
      ULOCK
      mbp2 SWAP ( n #r ) 2* EESTART + !
      LOCK
      MBWR   \ MODBUS write response
    ELSE ( #r ) EECELLS - DUP 0 HOLDINGCELLS WITHIN IF
        mbp2 SWAP ( n #r ) 2* holding + !
        MBWR   \ MODBUS write response
      ELSE
        DROP   2 MBEC
      THEN
    THEN
  ;NVM ( xth ) 6 FC>XT !


  \ MB read rxbuf payload data
  :NVM  ( i -- i a )
    DUP rxbuf + 7 +
  ;RAM ALIAS mbrxd

  \ --- FC15 "Write Multiple Coils"

  \ FC15 Write Multiple Coils write transfer
  :NVM  ( i -- )
    ( i ) rxbuf 7 + OVER mbp1 - ( i a i0 ) LEBF@ SWAP ( b i )
    coils SWAP ( b a i ) BF!
  ;RAM ALIAS FC15ACT

  \ FC15 handler
  :NVM  ( -- )
    [ COILCELLS 16 * ] LITERAL mbrange? IF
      [ ' FC15ACT ] LITERAL ( xt ) mbloop
      MBWR   \ MODBUS write response
    THEN
  ;NVM ( xth ) 15 FC>XT !

  \ --- FC16 "Write Multiple Register"

  \ FC16 holding register write transfer
  :NVM  ( i -- )
    ( i ) 2* mbrxd @ SWAP ( n 2i )
    holding + !
  ;RAM ALIAS FC16ACT

  \ FC16 handler
  :NVM  ( -- )
    HOLDINGCELLS mbrange? IF
      [ ' FC16ACT ] LITERAL ( xt ) mbloop
      MBWR   \ MODBUS write response
  ;NVM ( xt ) 16 FC>XT !

  \ Registration of FC handlers complete

  \ A dumy word for #require
  : MBSERVER ( -- )
  ;

WIPE RAM
