#require UARTISR
#require CRC16
#require ]B!
#require WIPE

NVM
  VARIABLE mbnode
  VARIABLE crcerr

  \ get MODBUS FC
  : mbfc ( -- c )
    rxbuf 1+ C@
  ;

  \ 1st MODBUS FC parameter
  : mbp1 ( -- n )
    rxbuf 2+ @
  ;

  \ 2nd MODBUS FC parameter
  : mbp2 ( -- n )
    rxbuf 4 + @
  ;

  \ calc CRC16 from buffer a0 to a1
  : MBCRC ( a1 a0 -- crc-le )
    -1 ROT ROT ( -1 a1 a0 ) DO
      I C@ CRC16
    LOOP
    ( CRC16 ) EXG ( CRC-LE )
  ;

  \ flag MODBUS Exception and set code
  : MBEC ( ec -- )
    [ 1 txbuf 1+ 7 ]B!
    ( ec ) txc+
  ;

  \ default FC handler - raise EC 1 "ILLEGAL FUNCTION"
  : FCINV ( -- )
    1 MBEC
    [ HERE ( xt ) ] 
  ;

  \ make FC-XT Table for FC>XT, initialize with "Invalid FC"
  HERE ( [ tab ] ) ' FCINV ( [ a1 a2 ] ) 
    DUP , DUP , DUP , DUP , DUP , DUP , DUP , DUP ,
    DUP , DUP , DUP , DUP , DUP , DUP , DUP ,     ,

  \ turn FC into XT table address
  : FC>XT ( fc -- a )
    1- 2* ( [ tab ] ) LITERAL +
  ;

  \ process MB  loop in (xt) steps from mbp1 to mbp1+mbp2
  : mbloop ( xt -- )
    mbp1 mbp2 OVER + SWAP  DO
      ( xt ) I OVER EXECUTE ( inc )
    +LOOP
    DROP
  ;

  \ MB looped read action (xt) with bpu bit per increment
  : mbread ( xt bpu -- )
    mbp2 * 1- 8 / 1+ txc+
    ( xt bpu ) mbloop
  ;

  \ MODBUS protocol handler
  : MBPROTO ( -- )
    rxbuf rxp @ - ( rx )
    1 TIM tstamp @ - <   AND ( message trigger )
    IF
      rxp @ 2- ( a1 ) DUP rxbuf ( a1 a1 a0 )
      MBCRC ( a1 crc-le ) SWAP @ = ( crc OK )
      mbnode @ rxbuf C@ = AND   ( node address match )
      ( crc-ok ) IF
        rxbuf    C@  ( DUP  ." S: " . CR )     txc+
        rxbuf 1+ C@  DUP txc+  ( fc )
        DUP 1 17 WITHIN IF
           FC>XT @ EXECUTE
        ELSE
          FCINV
        THEN
        tbp @ txbuf ( a1 a0 ) MBCRC ( CRC-LE ) tx+
      ELSE
        1 crcerr +!
      THEN
      send rxres
    THEN
  ;

WIPE RAM

\\

  \ show contents the RX and TX buffers
  : bufdump ( -- )
    CR ."  rxbuf:"
    rxbuf rxp @ OVER - DUP . DUMP
    CR ."  txbuf:"
    txbuf tbp @ OVER - DUP . DUMP
  ;
